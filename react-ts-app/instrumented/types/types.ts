function cov_dtvoa5iqf() {
  var path = "C:\\Users\\Olya\\Desktop\\RS School\\react-app\\react-ts-app\\src\\types\\types.ts";
  var hash = "0700cf180a10a3b437a2c4f909a55dd2fc84bb02";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Olya\\Desktop\\RS School\\react-app\\react-ts-app\\src\\types\\types.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0700cf180a10a3b437a2c4f909a55dd2fc84bb02"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dtvoa5iqf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dtvoa5iqf();
import { skipToken } from "@reduxjs/toolkit/dist/query";
import { UseFormRegister } from "react-hook-form";
export type IEmptyProps = Record<string, never>;
export interface IInputValue {
  inputValue: string;
}
export interface IButtonProps {
  buttonText: string;
  buttonType: "button" | "submit" | "reset" | undefined;
}
export interface IErrorText {
  errorText?: string;
}
export interface INewCard {
  title?: string;
  year?: string;
  genre?: string;
  popularity?: string;
  cover?: string;
}
export interface IFormPageState {
  cards: Array<INewCard>;
  showPopup: boolean;
}
export interface IFormProps {
  renderCards: (newCard: INewCard) => void;
}
export interface IFormValues {
  textInput: string;
  dateInput: string;
  select: string;
  radioInput: string;
  fileInput: FileList;
  checkboxInput: boolean;
}
export interface IInputProps {
  register: UseFormRegister<IFormValues>;
  required: boolean;
  isError?: null | true;
}
export interface ISearchElemProps {
  setValue: (value: string) => void;
}
export interface ICardsProps {
  images: ISearchResult[];
  cardsFunc?: (photo: any) => void;
}
export interface ISearchResult {
  id: string;
  title: string;
  imageUrl: string;
  date?: string;
  author?: string;
  location?: string;
}
export interface IRequestParams {
  method?: string;
  text?: string;
  photo_id?: string;
  api_key: string;
  per_page: string;
  page: string;
  format: string;
  nojsoncallback: string;
}
interface IPhoto {
  id: string;
  owner: string;
  secret: string;
  server: string;
  title: string;
}
export type IPhotosResponseJson = {
  photos: {
    page: number;
    pages: number;
    perpage: number;
    total: number;
    photo: IPhoto[];
  };
  stat: string;
};
export interface IPhotosResponse {
  json(): Promise<IPhotosResponseJson>;
}
export interface IPhotoResponse {
  json(): Promise<IPhotoResponseJson>;
}
export interface IPhotoResponseJson {
  photo: {
    id: string;
    server: string;
    secret: string;
    title: {
      _content: string;
    };
    dates: {
      posted: string;
    };
    owner: {
      realname: string;
      location: string;
    };
  };
  stat: string;
}
export interface IUnsetMaxHeight {
  maxheight?: "unset-max-height";
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,